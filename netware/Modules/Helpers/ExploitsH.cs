using Photon.Pun;
using UnityEngine;
using Assets.Scripts;
using System.Linq;
using System.Collections.Generic;
using JustPlay.Explosions;

namespace NetWare.Helpers
{
    public class ExploitsH : MonoBehaviour
    {
        // values
        public static int buildingSpammerTimer = 0;
        public static int autoPlayTimer = 0;
        public static int rigSpamTimer = 0;
        public static string changeSkinId = "293";
        public static string pickaxeChangerId = "Default";
        public static List<WeaponsController> weaponModsHookedWeapons = new List<WeaponsController>();
        public static int weaponModsTimer = 0;

        // game
        public static void ForceWin()
        {
            Network.BecomeMasterClient();
            GameManager.Instance.EndGame(false, false, Enumerable.Range(1, 5).ToList());
        }
        public static void FreezeAll()
        {
            Network.BecomeMasterClient();

            foreach (PlayerController playerController in Storage.players)
            {
                if (!Players.IsPlayerTeammate(playerController) && Players.IsPlayerValid(playerController))
                {
                    playerController.photonView.ControllerActorNr = PhotonNetwork.LocalPlayer.ActorNumber;
                    PhotonNetwork.Destroy(playerController.photonView);
                }
            }
        }
        public static void KillAll()
        {
            Network.BecomeMasterClient();

            foreach (PlayerController playerController in Storage.players)
            {
                if (!Players.IsPlayerTeammate(playerController) && Players.IsPlayerValid(playerController))
                {
                    playerController.photonView.OwnerActorNr = PhotonNetwork.LocalPlayer.ActorNumber;
                    playerController.TakeDamage(
                        playerController.photonView.CreatorActorNr.ToString(),
                        999999,
                        JLOMDBBHFOP.Player,
                        playerController.transform.position
                    );
                }
            }
        }
        public static void DestroyBuildings()
        {
            Network.BecomeMasterClient();

            Network.GetBuildingNetworkController()?.KillAllBuildings(true);
        }
        public static void OpenCrates()
        {
            Network.BecomeMasterClient();

            PlayerController playerController = LocalPlayer.Get();

            if (playerController != null)
            {
                foreach (SupplyCrate supplyCrate in FindObjectsOfType<SupplyCrate>())
                {
                    supplyCrate.OpenCrate(playerController);
                }
            }
        }

        // locker
        public static void UnlockEmotes()
        {
            ServerUser serverUser = Network.GetServerUser();

            if (serverUser != null)
            {
                for (int index = 1; index <= 100; index++)
                {
                    serverUser.Skins.OwnedEmotes.Add("lol.1v1.playeremotes.pack." + index);
                }
            }
        }
        public static void UnlockStickers()
        {
            ServerUser serverUser = Network.GetServerUser();

            if (serverUser != null)
            {
                for (int index = 1; index <= 100; index++)
                {
                    serverUser.Skins.OwnedEmotes.Add("lol.1v1.playerstickers.pack." + index);
                }
            }
        }
        public static void ChangeSkin()
        {
            ServerUser serverUser = Network.GetServerUser();

            if (serverUser != null && int.TryParse(changeSkinId, out _))
            {
                serverUser.Skins.EquippedCharacterSkin = ("lol.1v1.playerskins.pack." + changeSkinId);
            }
        }
        public static void ChangePickaxe()
        {
            ServerUser serverUser = Network.GetServerUser();

            if (serverUser != null)
            {
                string[] pickaxes = { "Default", "Galactic Smasher", "Warhammer", "Chicken Axe", "Candy Cane", "Lethal Gift" };
                foreach (string pickaxe in pickaxes)
                {
                    string pickaxeId = ("lol.1v1.weaponskins.melee.pickaxe." + pickaxe.ToLower().Replace(" ", ""));
                    switch (pickaxeId)
                    {
                        case "Galactic Smasher":
                            pickaxeId = "lol.1v1.weaponskins.melee.pickaxe.scifihammer";
                            break;
                        case "Chicken Axe":
                            pickaxeId = "lol.1v1.weaponskins.melee.pickaxe.chicken_leg";
                            break;
                        case "Lethal Gift":
                            pickaxeId = "lol.1v1.weaponskins.melee.pickaxe.christmas_present";
                            break;
                    }

                    if (serverUser.Skins.EquippedWeaponSkins.Contains(pickaxeId))
                    {
                        serverUser.Skins.EquippedWeaponSkins.Remove(pickaxeId);
                    }
                    if (serverUser.Skins.WeaponSkins.Contains(pickaxeId))
                    {
                        serverUser.Skins.WeaponSkins.Remove(pickaxeId);
                    }
                }

                switch (pickaxeChangerId)
                {
                    case "Default":
                        serverUser.Skins.EquippedWeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.default");
                        serverUser.Skins.WeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.default");
                        break;
                    case "Galactic Smasher":
                        serverUser.Skins.EquippedWeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.scifihammer");
                        serverUser.Skins.WeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.scifihammer");
                        break;
                    case "Warhammer":
                        serverUser.Skins.EquippedWeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.warhammer");
                        serverUser.Skins.WeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.warhammer");
                        break;
                    case "Chicken Axe":
                        serverUser.Skins.EquippedWeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.chicken_leg");
                        serverUser.Skins.WeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.chicken_leg");
                        break;
                    case "Candy Cane":
                        serverUser.Skins.EquippedWeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.candycane");
                        serverUser.Skins.WeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.candycane");
                        break;
                    case "Lethal Gift":
                        serverUser.Skins.EquippedWeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.christmas_present");
                        serverUser.Skins.WeaponSkins.Add("lol.1v1.weaponskins.melee.pickaxe.christmas_present");
                        break;
                }
            }
        }

        // gameplay
        public static void LeaveGame()
        {
            PhotonNetwork.Disconnect();
        }

        // account
        public static void SignOut()
        {
            Network.GetFirebaseManager()?.SignOut();
        }

        // fun
        public static void AddFakeGold()
        {
            CurrencyManager.IAOLLGGFCDC?.AddHardCurrency(10000);
        }
        public static void AddFakeGems()
        {
            CurrencyManager.IAOLLGGFCDC?.AddLoLTokens(10000);
        }
        public static void WeaponFiredHook(double _)
        {
            Vector3? bulletHitPosition = LocalPlayer.GetAimPosition();

            if (bulletHitPosition != null)
            {
                if (Config.GetBool("exploits.fun.buildinggun"))
                {
                    BuildingNetworkController buildingNetworkController = Network.GetBuildingNetworkController();

                    if (buildingNetworkController != null)
                    {
                        JKEICLMMENJ[] buildingList = {
                            JKEICLMMENJ.Wall,
                            JKEICLMMENJ.Ramp,
                            JKEICLMMENJ.Floor,
                            JKEICLMMENJ.Roof
                        };

                        buildingNetworkController.CreateBuilding(buildingList[Random.Range(0, 3)], (Vector3)bulletHitPosition, Quaternion.identity);
                    }
                }

                if (Config.GetBool("exploits.fun.teleportgun"))
                {
                    PlayerController localPlayer = LocalPlayer.Get();

                    if (localPlayer != null)
                    {
                        localPlayer.gameObject.transform.position = (Vector3)bulletHitPosition;
                    }
                }

                if (Config.GetBool("exploits.fun.explosiongun"))
                {
                    ExplosionData explosionData = new ExplosionData {
                        DamageFallOff = 0,
                        DamageToBuildings = 50,
                        DamageToPlayers = 10000,
                        Force = 0,
                        IsPercentageDamage = false,
                        Radius = 10000,
                        UpForce = 0,
                        VFXType = HIIENHMMJMM.Standard
                    };

                    ExplosionSpawner.SpawnRemotely("", (Vector3)bulletHitPosition, explosionData);
                }
            }
        }
    }
}

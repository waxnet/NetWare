using NetWare.Attributes;
using NetWare.Configuration;
using NetWare.Entities;

using UnityEngine;
using Photon.Pun;
using Assets.Scripts;
using System.Linq;

namespace NetWare.Modules.RageModules;

[NetWareComponent]
public sealed class Exploits : MonoBehaviour
{
    public void Update()
    {
        if (
            !PhotonNetwork.InRoom ||
            LocalPlayer.Get() is null
            )
            return;

        // godmode
        LocalPlayer.GetHealth()?.SetPlayerImmunity(Config.Active.Exploits.GodMode);

        // one tap buildings
        PlayerBuildingManager.IsOneHitBuildings = Config.Active.Exploits.OneTapBuildings;

        // no dive
        if (Config.Active.Exploits.NoDive)
            LocalPlayer.GetThirdPersonController()?.SetDiveState(false);

        // infinite ammo
        if (Config.Active.Exploits.InfiniteAmmo)
            LocalPlayer.GetWeaponModel()?.SetCurrentAmmoAmount(200);

        // infinite materials
        if (Config.Active.Exploits.InfiniteMaterials)
            LocalPlayer.GetPlayerBuildingManager()?.AddBuildingAmmo(5);

        // infinite level weapons
        if (Config.Active.Exploits.InfiniteLevelWeapons)
            LocalPlayer.GetWeaponsController()?.AddLevelsToAllWeapons(5);
    }

    // other
    public static void SpawnRig()
    {
        PlayerController localPlayer = LocalPlayer.Get();
        if (localPlayer is null )
            return;

        PhotonNetwork.Instantiate(
            "PolyPlayer",
            localPlayer.gameObject.transform.position,
            Quaternion.identity,
            0,
            null
        );
    }

    public static void DestroyAllBuildings()
    {
        BuildingNetworkController.Instance?.KillAllBuildings(true);
    }

    public static void OpenAllCrates()
    {
        PlayerController playerController = LocalPlayer.Get();
        if (playerController is null)
            return;

        foreach (SupplyCrate supplyCrate in FindObjectsOfType<SupplyCrate>())
            supplyCrate.OpenCrate(playerController);
    }

    public static void ForceWin()
    {
        GameManager.Instance.EndGame(false, false, Enumerable.Range(1, 5).ToList());
    }
}

using Assets.Scripts;
using CodeStage.AntiCheat.ObscuredTypes;
using NetWare.Helpers;
using Photon.Pun;
using UnityEngine;

namespace NetWare
{
    public class Exploits : MonoBehaviour
    {
        public static void Execute()
        {
            // player
            if (!Config.GetBool("exploits.gameplay.autoplay"))
            {
                LocalPlayer.GetHealth()?.SetPlayerImmunity(Config.GetBool("exploits.player.godmode"));
            }

            if (Config.GetBool("exploits.player.instantland"))
            {
                LocalPlayer.GetThirdPersonController()?.SetDiveState(false);
            }

            if (Config.GetBool("exploits.player.infinitematerials"))
            {
                Access.SetValue(
                    LocalPlayer.GetPlayerBuildingManager()?.buildingManager,
                    "CDPOLAKMPJK",
                    ObscuredInt.OGNKHBOPDFJ(-1)
                );
            }

            if (Config.GetBool("exploits.player.antifreeze"))
            {
                LocalPlayer.Get()?.photonView?.gameObject?.SetActive(true);
            }
            
            // gameplay
            if (Config.GetBool("exploits.gameplay.autoplay"))
            {
                // update timer
                ExploitsH.autoPlayTimer++;

                // check for overtime
                if (GameManager.ADDBCPJLAPJ)
                {
                    ResultScreenManager.IAOLLGGFCDC?.OnPlayAgainPressed();
                }

                // godmode
                LocalPlayer.GetHealth()?.SetPlayerImmunity(true);

                // infinite ammo
                WeaponModel weaponModel = LocalPlayer.GetWeaponModel();
                weaponModel?.SetCurrentAmmoAmount(15);
                weaponModel?.SetCurrentMagazineAmount(15);

                // no recoil
                LocalPlayer.GetThirdPersonCamera()?.AddRecoil(Vector2.zero, 0, 0);

                if (ExploitsH.autoPlayTimer >= 2)
                {
                    // play again
                    FindObjectOfType<MatchResultScreen>()?.PlayAgainPressed();

                    if (ExploitsH.autoPlayTimer >= 6)
                    {
                        // kill everyone   
                        foreach (PlayerController playerController in Storage.players)
                        {
                            if (Players.IsPlayerValid(playerController) && !Players.IsPlayerTeammate(playerController))
                            {
                                // teleport and look at target
                                PlayerController localPlayer = LocalPlayer.Get();
                                localPlayer.gameObject.transform.position = (playerController.transform.position + -playerController.transform.forward);
                                localPlayer.gameObject.transform.LookAt(playerController.transform.position);

                                // aim at target
                                Camera.main.transform.LookAt(Players.GetHipPosition(playerController));

                                // shoot weapon (rapid fire)
                                LocalPlayer.GetWeaponsController()?.photonView?.RPC(
                                    "FireWeaponRemote",
                                    RpcTarget.All,
                                    new object[] {
                                        null,
                                        true,
                                        1
                                    }
                                );
                            }
                        }
                    }
                }

                // reset timer
                if (ExploitsH.autoPlayTimer >= 10)
                {
                    ExploitsH.autoPlayTimer = 0;
                }
            }

            // game
            if (Config.GetBool("exploits.game.buildingspam") && Storage.players.Length > 0)
            {
                ExploitsH.buildingSpammerTimer++;

                if (ExploitsH.buildingSpammerTimer > 6)
                {
                    Network.BecomeMasterClient();

                    PlayerController playerController = Storage.players[Random.Range(0, Storage.players.Length)];

                    if (Players.IsPlayerValid(playerController) && !Players.IsPlayerTeammate(playerController))
                    {
                        Vector3 buildingPosition = Players.GetHipPosition(playerController);
                        BuildingNetworkController buildingNetworkController = Network.GetBuildingNetworkController();

                        if (buildingNetworkController != null)
                        {
                            buildingNetworkController.CreateBuilding(JKEICLMMENJ.Wall, buildingPosition, Quaternion.identity);
                            buildingNetworkController.CreateBuilding(JKEICLMMENJ.Floor, buildingPosition, Quaternion.identity);
                            buildingNetworkController.CreateBuilding(JKEICLMMENJ.Ramp, buildingPosition, Quaternion.identity);
                            buildingNetworkController.CreateBuilding(JKEICLMMENJ.Roof, buildingPosition, Quaternion.identity);
                        }
                    }

                    ExploitsH.buildingSpammerTimer = 0;
                }
            }

            if (Config.GetBool("exploits.game.rigspam"))
            {
                ExploitsH.rigSpamTimer++;

                if (ExploitsH.rigSpamTimer > 10)
                {
                    PlayerController localPlayer = LocalPlayer.Get();

                    if (localPlayer != null)
                    {
                        PhotonNetwork.Instantiate("PolyPlayer", localPlayer.gameObject.transform.position, Quaternion.identity, 0, null);
                    }

                    ExploitsH.rigSpamTimer = 0;
                }
            }

            PlayerBuildingManager.IsOneHitBuildings = Config.GetBool("exploits.game.instantbreak");
            
            // fun
            if (Config.GetBool("exploits.fun.levelchanger"))
            {
                ServerUser serverUser = Network.GetServerUser();

                if (serverUser != null)
                {
                    foreach (UserUpgradeableItem userUpgradeableItem in serverUser.Equipment.Equipment.Values)
                    {
                        userUpgradeableItem.Level = Config.GetInt("exploits.fun.levelchangeramount");
                    }
                }
            }
            
            if (ExploitsH.weaponModsTimer >= 10)
            {
                WeaponsController weaponsController = LocalPlayer.GetWeaponsController();

                if (weaponsController != null && PhotonNetwork.InRoom)
                {
                    if (!ExploitsH.weaponModsHookedWeapons.Contains(weaponsController))
                    {
                        weaponsController.JKMOPMFMFPH += ExploitsH.WeaponFiredHook;
                        ExploitsH.weaponModsHookedWeapons.Add(weaponsController);
                    }
                } else {
                    ExploitsH.weaponModsHookedWeapons.Clear();
                }

                ExploitsH.weaponModsTimer = 0;
            }
            ExploitsH.weaponModsTimer++;
        }
        
        public static void Tab()
        {
            Menu.Begin();

            Menu.NewSection("Player");
            Config.SetBool(
                "exploits.player.godmode",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.godmode"),
                    "Godmode"
                )
            );
            Config.SetBool(
                "exploits.player.instantland",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.instantland"),
                    "Instant Land"
                )
            );
            Config.SetBool(
                "exploits.player.infinitematerials",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.infinitematerials"),
                    "Infinite Materials"
                )
            );
            Config.SetBool(
                "exploits.player.antifreeze",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.antifreeze"),
                    "Anti Freeze"
                )
            );

            Menu.NewSection("Gameplay");
            Menu.NewButton("Leave Game", ExploitsH.LeaveGame);
            Config.SetBool(
                "exploits.gameplay.autoplay",
                Menu.NewToggle(
                    Config.GetBool("exploits.gameplay.autoplay"),
                    "Auto Play"
                )
            );

            Menu.NewSection("Account");
            Menu.NewButton("Sign Out", ExploitsH.SignOut);

            Menu.NewSection("Locker");
            Menu.NewButton("Unlock Emotes", ExploitsH.UnlockEmotes);
            Menu.NewButton("Unlock Stickers", ExploitsH.UnlockStickers);
            Menu.NewTitle("Skins");
            ExploitsH.changeSkinId = Menu.NewTextField("Skin ID", ExploitsH.changeSkinId);
            Menu.NewButton("Change Skin", ExploitsH.ChangeSkin);
            ExploitsH.pickaxeChangerId = Menu.NewList("Pickaxe ID", ExploitsH.pickaxeChangerId, new string[] {
                "Default",
                "Galactic Smasher",
                "Warhammer",
                "Chicken Axe",
                "Candy Cane",
                "Lethal Gift"
            });
            Menu.NewButton("Change Pickaxe", ExploitsH.ChangePickaxe);

            Menu.Separate();

            Menu.NewSection("Game");
            Menu.NewButton("Force Win", ExploitsH.ForceWin);
            Menu.NewButton("Freeze All", ExploitsH.FreezeAll);
            Menu.NewButton("Kill All", ExploitsH.KillAll);
            Menu.NewButton("Destroy Buildings", ExploitsH.DestroyBuildings);
            Menu.NewButton("Open Crates", ExploitsH.OpenCrates);
            Config.SetBool(
                "exploits.game.buildingspam",
                Menu.NewToggle(
                    Config.GetBool("exploits.game.buildingspam"),
                    "Building Spam"
                )
            );
            Config.SetBool(
                "exploits.game.rigspam",
                Menu.NewToggle(
                    Config.GetBool("exploits.game.rigspam"),
                    "Rig Spam"
                )
            );
            Config.SetBool(
                "exploits.game.instantbreak",
                Menu.NewToggle(
                    Config.GetBool("exploits.game.instantbreak"),
                    "Instant Break"
                )
            );

            Menu.NewSection("Fun");
            Menu.NewButton("Add 10k Fake Gold", ExploitsH.AddFakeGold);
            Menu.NewButton("Add 10k Fake Gems", ExploitsH.AddFakeGems);
            Menu.NewTitle("Loadout Level Changer");
            Config.SetBool(
                "exploits.fun.levelchanger",
                Menu.NewToggle(
                    Config.GetBool("exploits.fun.levelchanger"),
                    "Enabled"
                )
            );
            Config.SetInt(
                "exploits.fun.levelchangeramount",
                (int)Menu.NewSlider(
                    "Amount",
                    Config.GetInt("exploits.fun.levelchangeramount"),
                    1,
                    50
                )
            );
            Menu.NewTitle("Weapon Mods");
            Config.SetBool(
                "exploits.fun.buildinggun",
                Menu.NewToggle(
                    Config.GetBool("exploits.fun.buildinggun"),
                    "Building Gun"
                )
            );
            Config.SetBool(
                "exploits.fun.teleportgun",
                Menu.NewToggle(
                    Config.GetBool("exploits.fun.teleportgun"),
                    "Teleport Gun"
                )
            );
            Config.SetBool(
                "exploits.fun.explosiongun",
                Menu.NewToggle(
                    Config.GetBool("exploits.fun.explosiongun"),
                    "Explosion Gun"
                )
            );

            Menu.End();
        }
    }
}
